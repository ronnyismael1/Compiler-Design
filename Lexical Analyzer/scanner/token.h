#ifndef TOKEN_H
#define TOKEN_H

#include <string>

enum TokenType {
    AND,
    ARRAY,
    ASM,
    BEGIN,
    BREAK,
    CASE,
    CONST,
    CONSTRUCTOR,
    CONTINUE,
    DESTRUCTOR,
    DIV,
    DO,
    DOWNTO,
    ELSE,
    END,
    FALSE,
    FFILE,
    FOR,
    FUNCTION,
    GOTO,
    IF,
    IMPLEMENTATION,
    IN,
    INLINE,
    INTERFACE,
    LABEL,
    MOD,
    NIL,
    NOT,
    OBJECT,
    OF,
    ON,
    OPERATOR,
    OR,
    PACKED,
    PROCEDURE,
    PROGRAM,
    RECORD,
    REPEAT,
    SET,
    SHL,
    SHR,
    STRING,
    THEN,
    TO,
    TRUE,
    TYPE,
    UNIT,
    UNTIL,
    USES,
    VAR,
    WHILE,
    WITH,
    XOR,
    INTEGER,
    REAL,
    IDENTIFIER,
    PLUSOP,
    MINUSOP,
    MULTOP,
    DIVOP,
    COLON,
    ASSIGN,
    EQUAL,
    NE,
    LTEQ,
    GTEQ,
    LT,
    GT,
    PLUSEQUAL,
    MINUSEQUAL,
    MULTEQUAL,
    DIVEQUAL,
    CARAT,
    SEMICOLON,
    COMMA,
    LPAREN,
    RPAREN,
    LBRACKET,
    RBRACKET,
    LBRACE,
    RBRACE,
    LCOMMENT,
    RCOMMENT,
    STAR,
    UNK,
    END_OF_FILE
};

const std::string tokenLabels[] = {
    "AND",
    "ARRAY",
    "ASM",
    "BEGIN",
    "BREAK",
    "CASE",
    "CONST",
    "CONSTRUCTOR",
    "CONTINUE",
    "DESTRUCTOR",
    "DIV",
    "DO",
    "DOWNTO",
    "ELSE",
    "END",
    "FALSE",
    "FFILE",
    "FOR",
    "FUNCTION",
    "GOTO",
    "IF",
    "IMPLEMENTATION",
    "IN",
    "INLINE",
    "INTERFACE",
    "LABEL",
    "MOD",
    "NIL",
    "NOT",
    "OBJECT",
    "OF",
    "ON",
    "OPERATOR",
    "OR",
    "PACKED",
    "PROCEDURE",
    "PROGRAM",
    "RECORD",
    "REPEAT",
    "SET",
    "SHL",
    "SHR",
    "STRING",
    "THEN",
    "TO",
    "TRUE",
    "TYPE",
    "UNIT",
    "UNTIL",
    "USES",
    "VAR",
    "WHILE",
    "WITH",
    "XOR",
    "INTEGER",
    "REAL",
    "IDENTIFIER",
    "PLUSOP",
    "MINUSOP",
    "MULTOP",
    "DIVOP",
    "COLON",
    "ASSIGN",
    "EQUAL",
    "NE",
    "LTEQ",
    "GTEQ",
    "LT",
    "GT",
    "PLUSEQUAL",
    "MINUSEQUAL",
    "MULTEQUAL",
    "DIVEQUAL",
    "CARAT",
    "SEMICOLON",
    "COMMA",
    "LPAREN",
    "RPAREN",
    "LBRACKET",
    "RBRACKET",
    "LBRACE",
    "RBRACE",
    "LCOMMENT",
    "RCOMMENT",
    "STAR",
    "UNK",
    "END_OF_FILE"
};

struct Token
{
    TokenType type;
    std::string value;
};

#endif